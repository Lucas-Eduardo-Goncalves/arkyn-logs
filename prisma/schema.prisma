generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id
  email         String          @unique
  name          String
  utc           Int
  password      String
  createdAt     DateTime
  updatedAt     DateTime
  trafficSource TrafficSource[]
}

model TrafficSource {
  id                String              @id
  name              String
  trafficDomain     String
  createdAt         DateTime
  updatedAt         DateTime
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  domain            Domain[]
  pathname          Pathname[]
  httpTraffic       HttpTraffic[]
  exceptionPathname ExceptionPathname[]
  exception         Exception[]
}

enum Protocol {
  HTTP
  HTTPS
}

model Domain {
  id              String        @id
  value           String
  protocol        Protocol
  createdAt       DateTime
  trafficSourceId String
  trafficSource   TrafficSource @relation(fields: [trafficSourceId], references: [id])
  pathname        Pathname[]
  httpTraffic     HttpTraffic[]
}

model Pathname {
  id              String        @id
  value           String
  createdAt       DateTime
  trafficSourceId String
  domainId        String
  trafficSource   TrafficSource @relation(fields: [trafficSourceId], references: [id])
  domain          Domain        @relation(fields: [domainId], references: [id])
  httpTraffic     HttpTraffic[]
}

enum Method {
  POST
  PUT
  PATCH
  DELETE
  GET
}

enum Level {
  INFO
  FATAL
  WARNING
}

model HttpTraffic {
  id              String        @id
  status          Int
  method          Method
  level           Level
  trafficUserId   String?
  createdAt       DateTime
  trafficSourceId String
  elapsedTime     Int
  domainId        String
  pathnameId      String
  domain          Domain        @relation(fields: [domainId], references: [id])
  trafficSource   TrafficSource @relation(fields: [trafficSourceId], references: [id])
  pathname        Pathname      @relation(fields: [pathnameId], references: [id])
  request         Request?
  response        Response?
}

model Request {
  id            String      @id
  headers       Json
  body          Json
  queryParams   Json
  createdAt     DateTime
  httpTrafficId String      @unique
  httpTraffic   HttpTraffic @relation(fields: [httpTrafficId], references: [id])
}

model Response {
  id            String      @id
  headers       Json
  body          Json
  createdAt     DateTime
  httpTrafficId String      @unique
  httpTraffic   HttpTraffic @relation(fields: [httpTrafficId], references: [id])
}

model ExceptionPathname {
  id              String        @id
  value           String
  createdAt       DateTime
  trafficSourceId String
  trafficSource   TrafficSource @relation(fields: [trafficSourceId], references: [id])
  exception       Exception[]
}

model Exception {
  id                  String                @id
  hash                String                @unique
  message             String
  metadata            String
  firstSeenAt         DateTime
  lastSeenAt          DateTime
  createdAt           DateTime
  updatedAt           DateTime
  trafficSourceId     String
  exceptionPathnameId String
  trafficSource       TrafficSource         @relation(fields: [trafficSourceId], references: [id])
  exceptionPathname   ExceptionPathname     @relation(fields: [exceptionPathnameId], references: [id])
  excepetionOcurrence ExcepetionOcurrence[]
}

model ExcepetionOcurrence {
  id          String    @id
  exceptionId String
  createdAt   DateTime
  exception   Exception @relation(fields: [exceptionId], references: [id])
}
